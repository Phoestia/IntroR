



#Referrence Book

#ggplot2: Elegant Graphics for Data Analysis (Use R!): 
#http://www.amazon.com/ggplot2-Elegant-Graphics-Data-Analysis/dp/0387981403

#R Graphics Cookbook: 
#http://www.cookbook-r.com/Graphs/
#http://www.amazon.com/R-Graphics-Cookbook-Winston-Chang/dp/1449316956




#install.packages("ggplot2")
library(ggplot2)


#Scatter Plot
plot(mtcars$wt, mtcars$mpg)

#Line Graph
plot(pressure$temperature, pressure$pressure, type="l")
points(pressure$temperature, pressure$pressure) #add points

lines(pressure$temperature, pressure$pressure/2, type="l",col="red")
points(pressure$temperature, pressure$pressure/2,col="red")

#Bar Graph
barplot(table(mtcars$cyl))

#Histogram
hist(mtcars$mpg, breaks=10)

#Box Plot
boxplot(mtcars$mpg)

#Plotting a Function Curve
curve(x^3 - 5*x, from=-4, to=4)
myfun <- function(xvar) {
  1/(1 + exp(-xvar + 10))
}
curve(myfun(x), from=0, to=20)


#Basic use
dat=diamonds
qplot(carat, price, data = diamonds)
qplot(log(carat), log(price), data = diamonds)
qplot(carat, x * y * z, data = diamonds)

#Colour, size, shape and other aesthetic attributes
dsmall = diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
#make a semi-transparent colour, from 0 to 1
qplot(carat, price, data = diamonds, alpha = I(1/10))
qplot(carat, price, data = diamonds, alpha = I(1/100))
qplot(carat, price, data = diamonds, alpha = I(1/200))


#Plot geoms

#geom = "point" draws points to produce a scatterplot. This is the default
#when you supply both x and y arguments to qplot().

#geom = "smooth" fits a smoother to the data and displays the smooth and
#its standard error.

#geom = "boxplot" produces a box-and-whisker plot to summarise the
#distribution of a set of points.

#geom = "path" and geom = "line" draw lines between the data points.
#Traditionally these are used to explore relationships between time and
#another variable, but lines may be used to join observations connected in
#some other way.

#geom = "histogram"
#geom = "freqpoly"
#geom = "density"
#geom = "bar"

qplot(carat, price, data = dsmall, geom = c("point", "smooth"))

library(splines)
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "lm")
qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "lm", formula = y ~ ns(x,5))

#color, fill
qplot(color, price, data = dsmall, geom = "boxplot")
qplot(color, price, data = diamonds, geom = "boxplot",fill=I("blue"))
qplot(color, price, data = dsmall, geom = "boxplot",size=2)
#geom_boxplot()
qplot(color, price, 
      data = dsmall, 
      geom = "boxplot") + geom_boxplot(outlier.colour = "green", 
                                       outlier.size = 10,
                                       fill = "red", 
                                       colour = "blue",
                                       size=2)


qplot(carat, data = diamonds, geom = "histogram",colour=color,fill=color)
qplot(carat, data = diamonds, geom = "density")
qplot(carat, data = diamonds, geom = "density", color = color)
qplot(carat, data = diamonds, geom = "density", fill = color)

qplot(color, data = diamonds, geom = "bar",fill=color)

qplot(date, unemploy / pop, data = economics, geom = "line")
qplot(date, uempmed, data = economics, geom = "line")

qplot(unemploy / pop, uempmed, data = economics, geom = c("point", "path"))
year = function(x) as.POSIXlt(x)$year + 1900
qplot(unemploy / pop, uempmed, data = economics,
      geom = "path", colour = year(date))




#Lecture 2
#minghaowu_2015@163.com
setwd("~/documents/R programming/ggplot2")
library(ggplot2)
attach(mpg)
head(mpg)

#Review
qplot(displ, hwy, data = mpg, colour = factor(cyl))
qplot(displ, hwy, data = mpg, 
      colour = factor(cyl),
      geom=c("smooth","point"),
      method="lm")
qplot(displ, hwy, data=mpg, facets = . ~ year) + geom_smooth()


#Save
p = qplot(displ, hwy, data = mpg, colour = factor(cyl))
summary(p)
save(p, file = "plot.rdata")
load("plot.rdata")
ggsave("plot.png", width = 5, height = 5)


#Build a plot layer by layer
p = ggplot(diamonds, aes(carat, price, colour = cut))
p
p=p+geom_point()
#??????p=p+layer(geom = "point", stat = "identity", position = "identity",params = list(na.rm = FALSE))
#p = p + layer(geom = "point")
#ggplot(diamonds, aes(carat, price, colour = cut)) + layer(geom = "point")
p
#layer(geom, geom_params, stat, stat_params, data, mapping, position)
p <- ggplot(diamonds, aes(x = carat))
p <- p + layer(
  geom = "bar",
  stat = "bin",
#  position="identity",
#  params=list(na.rm=FALSE)
  geom_params = list(fill = "steelblue"),
  position="identity",
  stat_params = list(binwidth = 0.5)
)
p
#basic form
#geom_XXX(mapping, data, ..., geom, position)
#stat_XXX(mapping, data, ..., stat, position)
#Example 1
ggplot(msleep, aes(sleep_rem / sleep_total, awake)) + geom_point()
#is equivalent to
qplot(sleep_rem / sleep_total, awake, data = msleep)
#Example 2
qplot(sleep_rem / sleep_total, 
      awake, data = msleep,
      geom = c("point", "smooth"))
#is equivalent to
ggplot(msleep, aes(sleep_rem / sleep_total, awake)) + geom_point() + geom_smooth()
#is equivalent to
plot = ggplot(msleep, aes(sleep_rem / sleep_total, awake))
plot = plot + geom_point() + geom_smooth()
plot
#Example 3 (cont.)
bestfit = geom_smooth(method = "lm", 
                      se = T,
                      colour = "steelblue",
                      alpha=0.5,
                      size = 2)
qplot(sleep_rem, sleep_total, data = msleep) + bestfit
qplot(displ, hwy, data=mpg, facets = . ~ year) + bestfit


#Transform the data in the plot using %+%
p = ggplot(mtcars, aes(mpg, wt, colour = cyl)) + geom_point(size=5)
p
mtcars = transform(mtcars, mpg = mpg ^ 2)
p %+% mtcars


#Aesthetic mappings
qplot(color, price, data = diamonds, geom = "boxplot",fill=I("blue"))

#Aesthetic mappings
library(ggplot2)

#Plots and Layers
p = ggplot(mtcars, aes(x = mpg, y = wt))
p + geom_point()
p + geom_point(aes(colour = factor(cyl)))
p + geom_point(aes(y = disp))
#Add aes(colour = cyl) ======>  aes(mpg, wt, colour = cyl)
#Override aes(y = disp) ======> aes(mpg, disp)
#Remove aes(y = NULL) ======> aes(mpg)

#Setting vs. mapping
# Mapping: aes(colour = cut))
# Setting: color = "red"
p + geom_point(colour = "green")
# is different from
p + geom_point(aes(colour = "blue"))
#When "green" is mapped to colour, it is treated 
#as a regular value and scaled with the default colour scale.

#Grouping
library(nlme)
data(package="nlme")
?Oxboys
head(Oxboys)
str(Oxboys)
p = ggplot(Oxboys, aes(age, height, group = Subject)) + geom_line()
p
ggplot(Oxboys, aes(age, height, group = 1)) + geom_line()

#Different groups on different layers
p + geom_smooth(aes(group = Subject), method="lm", se = F)
p + geom_smooth(aes(group = 1), method="lm", se = F, size=2)

#Overriding the default grouping.
#no need to specify the group aesthetic here; the default grouping
#works because occasion is a discrete variable
boysbox = ggplot(Oxboys, aes(Occasion, height)) + geom_boxplot()
boysbox
boysbox + geom_line(aes(group = Subject), colour = "blue")

#Geom
#Stat

#Position adjustments
#dodge: Adjust position by dodging overlaps to the side
#fill: Stack overlapping objects and standardise have equal height
#identity: Do not adjust position
#jitter: Jitter points to avoid overplotting
#stack: Stack overlapping objects on top of one another

ggplot(diamonds,
       aes(clarity, fill = cut)) + geom_bar(position = "stack")
ggplot(diamonds,
       aes(clarity, fill = cut)) + geom_bar(position = "fill")
ggplot(diamonds,
       aes(clarity, fill = cut)) + geom_bar(position = "dodge")



#You are limited only by your imagination!




#Annoucement: 
#image quality
#new textbook: R Graphic Cookbook
install.packages("gcookbook")
library(gcookbook) #For the data set

#Bar Graph

#Making a Basic Bar Graph
ggplot(pg_mean, aes(x=group, y=weight)) + geom_bar(stat="identity")
?BOD
str(BOD)
ggplot(BOD, aes(x=Time, y=demand)) + geom_bar(stat="identity")
#x:123457 ???????????????Factor??????????????????6
ggplot(BOD, aes(x=factor(Time), y=demand)) + geom_bar(stat="identity")
ggplot(pg_mean, aes(x=group, y=weight)) +
  geom_bar(stat="identity", fill="lightblue", colour="black")

#Grouping Bars Together
?cabbage_exp
cabbage_exp
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
  geom_bar(position="dodge",stat="identity")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
  geom_bar(position="stack",stat="identity")
#dodge: Adjust position by dodging overlaps to the side
#fill: Stack overlapping objects and standardise have equal height
#identity: Do not adjust position
#jitter: Jitter points to avoid overplotting
#stack: Stack overlapping objects on top of one another

#Making a Bar Graph of Counts
ggplot(diamonds, aes(x=cut)) + geom_bar()

#Using Colors in a Bar Graph
str(uspopchange)
upc = subset(uspopchange, rank(Change)>40)
ggplot(upc, aes(x=Abb, y=Change, fill=Region)) + geom_bar(stat="identity")
ggplot(upc, aes(x=reorder(Abb, Change), y=Change, fill=Region)) +
  geom_bar(stat="identity", colour="black")

#Coloring Negative and Positive Bars Differently
?climate
str(climate)
csub = subset(climate, Source=="Berkeley" & Year >= 1900)
csub$pos = csub$Anomaly10y >= 0
str(csub)
ggplot(csub, aes(x=Year, y=Anomaly10y, fill=pos)) +
  geom_bar(stat="identity", position="identity") +
  scale_fill_manual(values=c("#669933", "#FFCC66"), guide=FALSE)

#Adjusting Bar Width and Spacing
ggplot(pg_mean, aes(x=group, y=weight)) + geom_bar(stat="identity")
ggplot(pg_mean, aes(x=group, y=weight)) + 
  geom_bar(stat="identity", width=0.5)
ggplot(pg_mean, aes(x=group, y=weight)) + 
  geom_bar(stat="identity", width=1)
#Grouped data
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
  geom_bar(stat="identity", width=0.5, position="dodge")
ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
  geom_bar(stat="identity", width=0.5, position=position_dodge(0.7))

#Adding Labels to a Bar Graph
# Below the top
ggplot(cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight)) +
  geom_bar(stat="identity") +
  geom_text(aes(label=Weight), vjust=1.5, colour="white")
# Above the top
ggplot(cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight)) +
  geom_bar(stat="identity") +
  geom_text(aes(label=Weight), vjust=0)

# Adjust y limits to be a little higher
ggplot(cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight)) +
  geom_bar(stat="identity") +
  geom_text(aes(label=Weight), vjust=-0.2) +
  ylim(0, max(cabbage_exp$Weight) * 1.05)

# Map y positions slightly above bar top 
#- y range of plot will auto-adjust
ggplot(cabbage_exp, aes(x=interaction(Date, Cultivar), y=Weight)) +
  geom_bar(stat="identity") +
  geom_text(aes(y=Weight+0.1, label=Weight))

ggplot(cabbage_exp, aes(x=Date, y=Weight, fill=Cultivar)) +
  geom_bar(stat="identity", position="dodge") +
  geom_text(aes(label=Weight), vjust=1.5, colour="black",
            position=position_dodge(0.9), size=10)


#Chapter 5 Toolbox
#This chapter lists some of the many geoms and 
#stats included in ggplot2, broken down by their purpose.
#but it does not describe each geom and stat in detail.

library(ggplot2)
#Basic plot types
df = data.frame(
  x = c(3, 1, 5),
  y = c(2, 4, 6),
  label = c("a","b","c")
)
p = ggplot(df, aes(x, y, label = label)) + xlab(NULL) + ylab(NULL)
p + geom_point() + opts(title = "geom_point")
p + geom_bar(stat="identity") #counting #The identity stat leaves the data unchanged
p + geom_line()
p + geom_area()
p + geom_path()
p + geom_text()
p + geom_tile()
p + geom_polygon()

#Displaying distributions
depth_dist = ggplot(diamonds, aes(depth)) + xlim(58, 68)
depth_dist + geom_histogram(aes(y = ..density..), binwidth = 0.1) + facet_grid(cut ~ .)
depth_dist + geom_histogram(aes(fill = cut), binwidth = 0.1, position = "fill")
depth_dist + geom_freqpoly(aes(y = ..density.., colour = cut), binwidth = 0.1)
#Both the histogram and frequency polygon geom use stat_bin.
#This statistic produces two output variables count and density.

qplot(cut, depth, data=diamonds, geom="boxplot")
qplot(carat, depth, data=diamonds, geom="boxplot",
      group = round(carat, 1), xlim = c(0, 3)) #typo

#Dealing with overplotting
df = data.frame(x = rnorm(2000), y = rnorm(2000))
#small dataset
norm = ggplot(df, aes(x, y))
norm + geom_point()
norm + geom_point(shape = 1) #from 0 to 112
norm + geom_point(shape = ".") #pixel sized

#large dataset
#typo: norm + geom_point(colour = alpha("black", 1/3))
norm + geom_point(alpha = I(1/3))
norm + geom_point(alpha = I(1/5))
norm + geom_point(alpha = I(1/10))

#two more approaches
library(hexbin)
d = ggplot(diamonds, aes(carat, price)) + xlim(1,3)
d + stat_bin2d()
d + stat_bin2d(bins = 10)
d + stat_bin2d(binwidth=c(0.02,200)) #binwidth =c(width, height)
d + stat_binhex()
d + stat_binhex(bins = 10)
d + stat_binhex(binwidth=c(0.02, 200))

#Surface plots
library(plot3D)
example(persp3D)
example(surf3D)
example(colkey)
example(plot.plist)
example(ImageOcean)

#Drawing maps
library(maps)
data(us.cities)
big_cities = subset(us.cities, pop > 500000)
qplot(long, lat, data = big_cities) + borders("state", size = 0.5)
tx_cities = subset(us.cities, country.etc == "TX")
ggplot(tx_cities, aes(long, lat)) + 
  borders("county", "texas", colour = "grey70") + 
  geom_point(alpha=I(0.5))




library(ggplot2)
library(gcookbook)

#Making a Basic Line Graph
BOD
ggplot(BOD, aes(x=Time, y=demand)) + geom_line()
BOD1 = BOD # Make a copy of the data
BOD1$Time = factor(BOD1$Time)
ggplot(BOD1, aes(x=Time, y=demand, group=1)) + geom_line()

ggplot(BOD, aes(x=Time, y=demand)) + 
  geom_line() + 
  ylim(0, max(BOD$demand))

#Adding Points to a Line Graph
ggplot(BOD, aes(x=Time, y=demand)) + geom_line() + geom_point()

#Making a Line Graph with Multiple Lines
library(plyr)
tg = ddply(ToothGrowth, c("supp", "dose"), 
           summarise, length=mean(len))
tg
ggplot(tg, aes(x=dose, y=length, colour=supp)) + geom_line()
ggplot(tg, aes(x=dose, y=length, linetype=supp)) + geom_line()
ggplot(tg, aes(x=dose, y=length)) + geom_line()
ggplot(tg, aes(x=dose, y=length, fill=supp)) + geom_line() +
  geom_point(size=4, shape=21)


#Changing the Appearance of Lines
ggplot(BOD, aes(x=Time, y=demand)) +
  geom_line(linetype="dashed", size=1, colour="blue")

#Changing the Appearance of Points
ggplot(BOD, aes(x=Time, y=demand)) +
  geom_line() +
  geom_point(size=4, shape=22, colour="red", fill="blue")

#Making a Graph with a Shaded Area
sunspotyear <- data.frame(
  Year = as.numeric(time(sunspot.year)),
  Sunspots = as.numeric(sunspot.year)
)
ggplot(sunspotyear, aes(x=Year, y=Sunspots)) + geom_area()
ggplot(sunspotyear, aes(x=Year, y=Sunspots)) +
  geom_area(colour="black", fill="blue", alpha=0.2)
ggplot(sunspotyear, aes(x=Year, y=Sunspots)) + geom_line()

#Making a Stacked Area Graph
ggplot(uspopage, aes(x=Year, y=Thousands, fill=AgeGroup)) + geom_area()
ggplot(uspopage, aes(x=Year, y=Thousands, fill=AgeGroup)) +
  geom_area(colour="black", size=0.2, alpha=0.4)
ggplot(uspopage, aes(x=Year, y=Thousands, 
                     fill=AgeGroup, order=desc(AgeGroup))) +
  geom_area(colour=NA, alpha=0.4) +
  geom_line(position="stack", size=0.2)

#Making a Proportional Stacked Area Graph
uspopage_prop = ddply(uspopage, "Year", transform,
                       Percent = Thousands / sum(Thousands) * 100)
ggplot(uspopage_prop, aes(x=Year, y=Percent, fill=AgeGroup)) +
  geom_area(colour="black", size=.2, alpha=.4)
ggplot(uspopage_prop, aes(x=Year, y=Percent, fill=AgeGroup)) +
  geom_area(colour=NA, size=.2, alpha=.4) + 
  geom_line(position="stack", size=0.2)

#Adding a Confidence Region
clim = subset(climate, Source == "Berkeley",
               select=c("Year", "Anomaly10y", "Unc10y"))
ggplot(clim, aes(x=Year, y=Anomaly10y)) +
  geom_ribbon(aes(ymin=Anomaly10y-Unc10y, ymax=Anomaly10y+Unc10y),
              alpha=0.2) + 
  geom_line()

ggplot(clim, aes(x=Year, y=Anomaly10y)) + 
  geom_line() + #main
  geom_line(aes(y=Anomaly10y-Unc10y), 
            colour="grey50", linetype="dashed") +#lower
  geom_line(aes(y=Anomaly10y+Unc10y), 
            colour="grey50", linetype="dashed") #upper 

library(gcookbook)
library(ggplot2)

#Making a Basic Scatter Plot
head(heightweight[, c("ageYear", "heightIn")])
ggplot(heightweight, aes(x=ageYear, y=heightIn)) + geom_point()
ggplot(heightweight, aes(x=ageYear, y=heightIn)) + 
  geom_point(shape=11,size=20)


#Grouping Data Points by a Variable Using Shape or Color
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) + 
  geom_point()
ggplot(heightweight, aes(x=ageYear, y=heightIn, shape=sex)) + 
  geom_point()

#Grouping Data Points with certain standard
hw = heightweight
hw$weightGroup = cut(hw$weightLb, breaks=c(-Inf, 100, Inf),
                      labels=c("< 100", ">= 100"))
head(hw)
ggplot(hw, aes(x=ageYear, y=heightIn, shape=sex, fill=weightGroup)) +
  geom_point(size=2.5) +
  scale_shape_manual(values=c(21, 24)) +
  scale_fill_manual(values=c(NA, "black"),
                    guide=guide_legend(override.aes=list(shape=21)))


#Mapping a Continuous Variable to Color or Size
ggplot(heightweight, 
       aes(x=ageYear, y=heightIn, colour=weightLb)) + 
  geom_point()
ggplot(heightweight, 
       aes(x=ageYear, y=heightIn, size=weightLb, colour=sex)) + 
  geom_point()

#Dealing with Overplotting
sp = ggplot(diamonds, aes(x=carat, y=price))
sp + geom_point()
sp + geom_point(alpha=.1) #semitransparent
sp + stat_bin2d()
sp + stat_bin2d(bins=50) +
  scale_fill_gradient(low="lightblue", 
                      high="red", limits=c(0, 6000))
library(hexbin)
sp + stat_binhex() +
  scale_fill_gradient(low="lightblue", high="red",
                      limits=c(0, 8000))
sp + stat_binhex() +
  scale_fill_gradient(low="lightblue", high="red",
                      breaks=c(0, 250, 500, 1000, 2000, 4000, 6000),
                      limits=c(0, 6000))

sp1 = ggplot(ChickWeight, aes(x=Time, y=weight))
sp1 + geom_point()
sp1 + geom_point(position="jitter")
# Could also use geom_jitter(), which is equivalent
sp1 + geom_point(position=position_jitter(width=.5, height=0))


#Adding Fitted Regression Model Lines
sp = ggplot(heightweight, aes(x=ageYear, y=heightIn))
?stat_smooth
sp + geom_point() + stat_smooth(method=lm)
#By default, stat_smooth() also adds 
#a 95% confidence region for the regression fit
sp + geom_point() + stat_smooth(method=lm, level=0.99)
sp + geom_point() + stat_smooth(method=lm, se=FALSE)
sp + geom_point() + stat_smooth()
#loess (locally weighted polynomial) curve

sps = ggplot(heightweight, 
              aes(x=ageYear, y=heightIn, colour=sex)) + geom_point()
sps + geom_smooth()

#Adding Fitted Lines from an Existing Model
#You have already created a fitted regression model object

#model
model = lm(heightIn ~ ageYear + I(ageYear^2), heightweight)
#range
xmin = min(heightweight$ageYear)
xmax = max(heightweight$ageYear)
predicted = data.frame(ageYear=seq(xmin, xmax, length.out=100))
predicted$heightIn = predict(model, predicted)

sp = ggplot(heightweight, aes(x=ageYear, y=heightIn)) +
  geom_point()
sp + geom_line(data=predicted, size=1)



#Adding Fitted Lines from Multiple Existing Models

predictvals = function(model, xvar, yvar, 
                       xrange=NULL, samples=100, ...) {
  if (is.null(xrange)) {
    if (any(class(model) %in% c("lm", "glm")))
      xrange = range(model$model[[xvar]])
    else if (any(class(model) %in% "loess"))
      xrange = range(model$x)
  }
  newdata = data.frame(x = seq(xrange[1], 
                               xrange[2], length.out = samples))
  names(newdata) = xvar
  newdata[[yvar]] = predict(model, newdata = newdata, ...)
  newdata
}

library(plyr)
make_model <- function(data) {
  lm(heightIn ~ ageYear, data)
}
models = dlply(heightweight, "sex", .fun = make_model)
predvals = ldply(models, .fun=predictvals, 
                 xvar="ageYear", yvar="heightIn")
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
  geom_point() + geom_line(data=predvals)


#Adding Annotations with Model Coefficients
model <- lm(heightIn ~ ageYear, heightweight)
pred = predictvals(model, "ageYear", "heightIn")
sp = ggplot(heightweight, aes(x=ageYear, y=heightIn)) + 
  geom_point() +
  geom_line(data=pred)
sp + annotate("text", label="r^2=0.42", x=16.5, y=52)
sp + annotate("text", label="r^2 == 0.42", 
              parse = TRUE, x=16.5, y=52)
#plotmath

#Adding Marginal Rugs to a Scatter Plot
ggplot(faithful, aes(x=eruptions, y=waiting)) + 
  geom_point() + geom_rug()

#Labeling Points in a Scatter Plot
?countries
sp = ggplot(subset(countries, Year==2009 & healthexp>2000),
             aes(x=healthexp, y=infmortality)) + 
  geom_point()
sp + annotate("text", x=4350, y=5.4, label="Canada") +
  annotate("text", x=7400, y=6.8, label="USA")
sp + geom_text(aes(label=Name), size=4)
sp + geom_text(aes(y=infmortality+0.1, label=Name), 
               size=4, vjust=0)
sp + geom_text(aes(x=healthexp+100, label=Name), 
               size=4, hjust=0)


#Creating a Balloon Plot
cdat = subset(countries, Year==2009 &
                 Name %in% c("Canada", "Ireland", 
                             "United Kingdom", "United States",
                             "New Zealand", "Iceland", 
                             "Japan", "Luxembourg",
                             "Netherlands", "Switzerland"))
p = ggplot(cdat, aes(x=healthexp, y=infmortality, size=GDP)) +
  geom_point(shape=21, colour="black", fill="cornsilk")
p
p + scale_size_area(max_size=15)

#Making a Scatter Plot Matrix
c2009 = subset(countries, Year==2009,
                select=c(Name, GDP, laborrate, 
                         healthexp, infmortality))
plot(c2009[,2:5])
pairs(c2009[,2:5])

library(ggplot2)
library(gcookbook)

#Making a Basic Histogram
?faithful
head(faithful)
ggplot(faithful, aes(x=waiting)) + geom_histogram()
w = faithful$waiting
ggplot(NULL, aes(x=w)) + geom_histogram()

ggplot(faithful, aes(x=waiting)) +
  geom_histogram(binwidth=5, fill="white", colour="black")

ggplot(faithful, aes(x=waiting)) +
  geom_histogram(fill="white", colour="black",origin=30)


#Making Multiple Histograms from Grouped Data
library(MASS)
?birthwt
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
  facet_grid(smoke ~ .)

birthwt1 = birthwt # Make a copy of the data
# Convert smoke to a factor
birthwt1$smoke = factor(birthwt1$smoke)
levels(birthwt1$smoke)

library(plyr)
birthwt1$smoke <- revalue(birthwt1$smoke, c("0"="No Smoke", "1"="Smoke"))
ggplot(birthwt1, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
  facet_grid(smoke ~ .)

ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
  facet_grid(race ~ .)
#resize y
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
  facet_grid(race ~ ., scales="free")

ggplot(birthwt1, aes(x=bwt, fill=smoke)) +
  geom_histogram(position="identity", alpha=0.4)


#Making a Density Curve
ggplot(faithful, aes(x=waiting)) + geom_density()
ggplot(faithful, aes(x=waiting)) + geom_line(stat="density") +
  expand_limits(x=0)
ggplot(faithful, aes(x=waiting)) + geom_line(stat="density")

ggplot(faithful, aes(x=waiting)) +
  geom_line(stat="density", adjust=0.25, colour="red") +
  geom_line(stat="density") +
  geom_line(stat="density", adjust=2, colour="blue")

ggplot(faithful, aes(x=waiting)) +
  geom_density(fill="blue", colour=NA, alpha=.2) +
  geom_line(stat="density") +
  xlim(35, 105)

ggplot(faithful, aes(x=waiting, y=..density..)) +
  geom_histogram(fill="blue", colour="red", size=.2) +
  geom_density(color="green") +
  xlim(35, 105)

#Making Multiple Density Curves from Grouped Data
ggplot(birthwt1, aes(x=bwt, fill=smoke)) + geom_density(alpha=.3)


#Making a Frequency Polygon
ggplot(faithful, aes(x=waiting)) + geom_freqpoly()
ggplot(faithful, aes(x=waiting)) + geom_freqpoly(binwidth=4)

#Making a Basic Box Plot
ggplot(birthwt, aes(x=factor(race), y=bwt)) + geom_boxplot()
ggplot(birthwt, aes(x=factor(race), y=bwt)) + geom_boxplot(width=0.5)
ggplot(birthwt, aes(x=factor(race), y=bwt)) +
  geom_boxplot(outlier.size=15, outlier.shape=24)

ggplot(birthwt, aes(x=1, y=bwt)) + geom_boxplot()
#Adding Notches to a Box Plot
ggplot(birthwt, aes(x=factor(race), y=bwt)) + geom_boxplot(notch=TRUE)
#Adding Means to a Box Plot
ggplot(birthwt, aes(x=factor(race), y=bwt)) + geom_boxplot() +
  stat_summary(fun.y="mean", geom="point", shape=23, size=10, fill="BLUE")

#Making a Violin Plot
p = ggplot(heightweight, aes(x=sex, y=heightIn))
p + geom_violin()
p + geom_violin(trim=FALSE)
p + geom_violin(adjust=2)

#Making a Density Plot of Two-Dimensional Data
p = ggplot(faithful, aes(x=eruptions, y=waiting))
p + geom_point() + stat_density2d()
p + stat_density2d(aes(colour=..level..))
p + stat_density2d(aes(fill=..density..), geom="raster", contour=FALSE)
p + geom_point() +
  stat_density2d(aes(alpha=..density..), geom="tile", contour=FALSE)
p + stat_density2d(aes(fill=..density..), geom="raster",
                   contour=FALSE, h=c(0.5,5))

#announcement:
#source code uploaded

library(ggplot2)
library(gcookbook)

#annotate(geom, x = NULL, y = NULL, xmin = NULL, xmax = NULL,
#           ymin = NULL, ymax = NULL, ...)

#geom: text, segment, rect, pointrange

p = ggplot(faithful, aes(x=eruptions, y=waiting)) + geom_point()
p
p + annotate("text", x=3, y=48, label="Group 1") +
  annotate("text", x=4.5, y=66, label="Group 2")

# 1=plain, 2=bold, 3=italic, 4=bold-italic
p + annotate("text", x=3, y=48, label="Group 1", family="serif",
             fontface="italic", colour="darkred", size=7) +
  annotate("text", x=4.5, y=66, label="Group 2", family="serif",
           fontface="bold", colour="darkred", size=20, alpha=0.2) + 
  annotate("text", x=2.5, y=26, label="Group 3", family="serif",
           fontface=4, colour="blue", size=7)

#install.packages("extrafont")
#library(extrafont)
#font_import()
library(extrafont)
fonts()

#If the axes are continuous
p + annotate("text", x=-Inf, y=Inf, label="Upper left", 
             hjust=-.2, vjust=2) +
  annotate("text", x=mean(range(faithful$eruptions)), y=-Inf, 
           vjust=-0.4,
           label="Bottom middle")


#Using Mathematical Expressions in Annotations
#plotmath
p = ggplot(data.frame(x=c(-3,3)), aes(x=x)) + 
  stat_function(fun = dnorm)
p
p + annotate("text", x=2, y=0.3, parse=TRUE,
             label="frac(1, sqrt(2 * pi)) * e ^ {-x^2 / 2}")
p + annotate("text", x=0, y=0.05, parse=TRUE, size=4,
             label="'Function: ' * y==frac(1, sqrt(2*pi)) * e^{-x^2/2}")


#Adding Lines
p = ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) + 
  geom_point()
p
# Add horizontal and vertical lines
p + geom_hline(yintercept=60) + geom_vline(xintercept=14)
## Add angled line
p + geom_abline(intercept=37.4, slope=1.75)

library(plyr)
hw_means = ddply(heightweight, "sex",
                 summarise, heightIn=mean(heightIn))
hw_means
p + geom_hline(aes(yintercept=heightIn, colour=sex), data=hw_means,
               linetype="dashed", size=1)

summary(PlantGrowth)
pg = ggplot(PlantGrowth, aes(x=group, y=weight)) + geom_point()
pg
pg + geom_vline(xintercept = which(levels(PlantGrowth$group)=="ctrl"))

#Adding Line Segments and Arrows
p = ggplot(subset(climate, Source=="Berkeley"), 
           aes(x=Year, y=Anomaly10y)) +
  geom_line()
p
p + annotate("segment", x=1950, xend=1980, y=-0.25, yend=-0.25)
library(grid)
p + annotate("segment", x=1850, xend=1820, y=-0.8, yend=-0.95, 
             colour="blue",
             size=2, arrow=arrow()) +
  annotate("segment", x=1950, xend=1980, y=-0.25, yend=-0.25,
           arrow=arrow(ends="both", angle=60, length=unit(0.5,"cm")))


#Adding a Shaded Rectangle
p = ggplot(subset(climate, 
                  Source=="Berkeley"), aes(x=Year,y=Anomaly10y)) +
  geom_line()
p
p + annotate("rect", xmin=1950, xmax=1980, 
             ymin=-Inf, ymax=Inf, alpha=.1,
             fill="blue")

#Highlighting an Item
pg = PlantGrowth # Make a copy of the PlantGrowth data
pg$hl = "no" # Set all to "no"
pg$hl[pg$group=="trt2"] = "yes" ## If group is "trt2", set to "yes"
ggplot(pg, aes(x=group, y=weight, fill=hl)) + geom_boxplot() +
  scale_fill_manual(values=c("grey85", "#FFDDCC"))

#Adding Error Bars
ce = subset(cabbage_exp, Cultivar == "c39")
ggplot(ce, aes(x=Date, y=Weight)) +
  geom_bar(fill="white", colour="black",stat="identity") +
  geom_errorbar(aes(ymin=Weight-se, ymax=Weight+se), width=.2)

ggplot(ce, aes(x=Date, y=Weight)) +
  geom_line(aes(group=1)) +
  geom_point(size=4) +
  geom_errorbar(aes(ymin=Weight-se, ymax=Weight+se), width=.2)

#Adding Annotations to Individual Facets
#base plot
p = ggplot(mpg, aes(x=displ, y=hwy)) + 
  geom_point() + facet_grid(. ~ drv)
p
f_labels = data.frame(drv = c("4", "f", "r"),
                      label = c("4wd", "Front", "Rear"))
p + geom_text(x=6, y=40, aes(label=label), data=f_labels)
p + annotate("text", x=6, y=42, label="label text")

#for the sake of completeness
#something not covered in textbook: Pointrange
#http://cran.r-project.org/web/packages/ggplot2/ggplot2.pdf
p = ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p + annotate("pointrange", x = 3.5, y = 20, ymin = 12, ymax = 28,
             colour = "red", size = 1.5)













#Controlling the Overall Appearance of Graphs

library(ggplot2)
library(gcookbook)

#Setting the Title of a Graph
p = ggplot(heightweight, aes(x=ageYear, y=heightIn)) + geom_point()
p + ggtitle("Age and Height of Schoolchildren")
p + ggtitle("Age and Height\nof Schoolchildren")# Use \n for a newline
p + annotate("text", 
             x=mean(range(heightweight$ageYear)), 
             y=Inf,
             label="Age and Height of Schoolchildren", 
             vjust=1.5, size=6)# Use a text annotation instead

#Changing the Appearance of Text
p + theme(axis.title.x=element_text(size=16, lineheight=.9, family="Times",
                                    face="bold.italic", colour="red"))
p + ggtitle("Age and Height\nof Schoolchildren") +
  theme(plot.title=element_text(size=rel(1.5), lineheight=.9, family="Times",
                                face="bold.italic", colour="red"))

p + annotate("text", x=15, y=53, label="Some text", size = 7, family="Times",
             fontface="bold.italic", colour="red")
p + geom_text(aes(label=weightLb), size=4, family="Times", colour="red",fontface="bold")
# For text geoms, font size is in mm

#check the textbook

#Using Themes
p + theme_grey()
p + theme_bw()
p
theme_set(theme_bw())
p
theme_set(theme_grey())
p

#Changing the Appearance of Theme Elements
p = ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) + 
  geom_point()
p + theme(
  panel.grid.major = element_line(colour="red"),
  panel.grid.minor = element_line(colour="red", linetype="dashed", size=0.2),
  panel.background = element_rect(fill="lightblue"),
  panel.border = element_rect(colour="blue", fill=NA, size=2))
# Options for text items
p + ggtitle("Plot title here") +
  theme(
    axis.title.x = element_text(colour="red", size=14,family="Times",face="bold"),
    axis.text.x = element_text(colour="blue"),
    axis.title.y = element_text(colour="red", size=14, angle = 90),
    axis.text.y = element_text(colour="blue"),
    plot.title = element_text(colour="red", size=20, face="bold"))
# Options for the legend
p + theme(
  legend.background = element_rect(fill="grey85", colour="red", size=1),
  legend.title = element_text(colour="blue", face="bold", size=14),
  legend.text = element_text(colour="red"),
  legend.key = element_rect(colour="green",fill="black", size=0.25))
# Options for facets
p + facet_grid(sex ~ .) + theme(
  strip.background = element_rect(fill="pink"),
  strip.text.y = element_text(size=14, angle=-90, face="bold"))
# strip.text.x is the same, but for horizontal facets


#Creating Your Own Themes
mytheme = 
  theme_bw() +
  theme(text = element_text(colour="red"),
        axis.title = element_text(size = rel(1.25)),
        plot.title = element_text(size = rel(3)))
p = ggplot(heightweight, aes(x=ageYear, y=heightIn)) + geom_point() + ggtitle("some title")
q = ggplot(mtcars,aes(x=wt,y=mpg)) + geom_point() + ggtitle("some title")
p + mytheme
q + mytheme


#Hiding Grid Lines
p + theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank())
# Hide the vertical grid lines (which intersect with the x-axis)
p + theme(panel.grid.major.x = element_blank(),
          panel.grid.minor.x = element_blank())






